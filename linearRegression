This below code is for ML-Linear-regression for an artificial data
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
df = pd.read_csv('USA_Housing.csv') #load the data
df.head((4)
df.columns
X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
       'Avg. Area Number of Bedrooms', 'Area Population']]
y = df['Price']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)
from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(X_train,y_train)
lm.intercept_
lm.coef_
X_train.columns
coeff_df = pd.DataFrame(X.columns,lm.coef_,columns=['Coefficient'])
coeff_df
#the output helps in predicting price say an increase in one unit increases price by tht
see incase of regression we know the values yet we are asked to predict y test is the original values so we use any 30% of sample through random shuffling to check whether the x 
correlates with y or not this is the entire principle behind the linear regression again x test for testing y test is real value...analys from test set and then use the reg from 
test to find train..compare it with y
##vvvv imp the coefficient thing is the real matter and the error from the test data then we are predicting the graph to visualize whether the answer we got are good or not if its
not goood go for re valuation


#Problem 1
#You just got some contract work with an Ecommerce company based in New York City that sells clothing online but they also have in-store style and clothing advice sessions. 
Customers come in to the store, have sessions/meetings with a personal stylist, then they can go home and order either on a mobile app or website for the clothes they want.
#The company is trying to decide whether to focus their efforts on their mobile app experience or their website. They've hired you on contract to help them figure it out! 
#Let's get started!
#Just follow the steps below to analyze the customer data (it's fake, don't worry I didn't give you real credit card numbers or emails).
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
customers = pd.read_csv("Ecommerce Customers")X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)
customers.head()
customers.describe()
customers.info()
sns.set_palette("GnBu_d")
sns.set_style('whitegrid')
X = ecdf[['Avg. Session Length', 'Time on App','Time on Website', 'Length of Membership']]
y = ecdf['Yearly Amount Spent']
sns.jointplot(x='Time on Website',y='Yearly Amount Spent',data=customers)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)
from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(X_train,y_train)
print('Coefficients: \n', lm.coef_)
predictions = lm.predict( X_test)
plt.scatter(y_test,predictions)
plt.xlabel('Y Test')
plt.ylabel('Predicted Y')
from sklearn import metrics
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))
coeffecients = pd.DataFrame(lm.coef_,X.columns)
coeffecients.columns = ['Coeffecient']
coeffecients
Holding all other features fixed, a 1 unit increase in Avg. Session Length is associated with an increase of 25.98 total dollars spent.
Holding all other features fixed, a 1 unit increase in Time on App is associated with an increase of 38.59 total dollars spent.
Holding all other features fixed, a 1 unit increase in Time on Website is associated with an increase of 0.19 total dollars spent.
Holding all other features fixed, a 1 unit increase in Length of Membership is associated with an increase of 61.27 total dollars spent.
